// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'modules/model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5449202534234826611),
      name: 'Owner',
      lastPropertyId: const IdUid(2, 7501913394815991568),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6775564272176393207),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7501913394815991568),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'tasks', srcEntity: 'Task', srcField: '')
      ]),
  ModelEntity(
      id: const IdUid(2, 742998306196326798),
      name: 'Task',
      lastPropertyId: const IdUid(5, 2976715773170010722),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8037377344557208430),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 937949242100743420),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7816559730945536321),
            name: 'status',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2976715773170010722),
            name: 'eventId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 3351835759687540735),
            relationTarget: 'Event')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 951358414277341102),
            name: 'owner',
            targetId: const IdUid(1, 5449202534234826611))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 4615618955972688005),
      name: 'Event',
      lastPropertyId: const IdUid(4, 7947824232814719535),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6726961503636699949),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1557912231479098699),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1999659735667266782),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7947824232814719535),
            name: 'location',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(name: 'tasks', srcEntity: 'Task', srcField: 'event')
      ])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 4615618955972688005),
      lastIndexId: const IdUid(2, 3351835759687540735),
      lastRelationId: const IdUid(1, 951358414277341102),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [5524996600152944078],
      retiredPropertyUids: const [4869559144515223840],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Owner: EntityDefinition<Owner>(
        model: _entities[0],
        toOneRelations: (Owner object) => [],
        toManyRelations: (Owner object) =>
            {RelInfo<Task>.toManyBacklink(1, object.id): object.tasks},
        getId: (Owner object) => object.id,
        setId: (Owner object, int id) {
          object.id = id;
        },
        objectToFB: (Owner object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = Owner(nameParam, id: idParam);
          InternalToManyAccess.setRelInfo<Owner>(
              object.tasks, store, RelInfo<Task>.toManyBacklink(1, object.id));
          return object;
        }),
    Task: EntityDefinition<Task>(
        model: _entities[1],
        toOneRelations: (Task object) => [object.event],
        toManyRelations: (Task object) =>
            {RelInfo<Task>.toMany(1, object.id): object.owner},
        getId: (Task object) => object.id,
        setId: (Task object, int id) {
          object.id = id;
        },
        objectToFB: (Task object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.addBool(2, object.status);
          fbb.addInt64(4, object.event.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final statusParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 8, false);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = Task(textParam, status: statusParam, id: idParam);
          object.event.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.event.attach(store);
          InternalToManyAccess.setRelInfo<Task>(
              object.owner, store, RelInfo<Task>.toMany(1, object.id));
          return object;
        }),
    Event: EntityDefinition<Event>(
        model: _entities[2],
        toOneRelations: (Event object) => [],
        toManyRelations: (Event object) => {
              RelInfo<Task>.toOneBacklink(
                      5, object.id, (Task srcObject) => srcObject.event):
                  object.tasks
            },
        getId: (Event object) => object.id,
        setId: (Event object, int id) {
          object.id = id;
        },
        objectToFB: (Event object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.date?.millisecondsSinceEpoch);
          fbb.addOffset(3, locationOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final dateParam = dateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(dateValue);
          final locationParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final object = Event(nameParam,
              id: idParam, date: dateParam, location: locationParam);
          InternalToManyAccess.setRelInfo<Event>(
              object.tasks,
              store,
              RelInfo<Task>.toOneBacklink(
                  5, object.id, (Task srcObject) => srcObject.event));
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Owner] entity fields to define ObjectBox queries.
class Owner_ {
  /// see [Owner.id]
  static final id = QueryIntegerProperty<Owner>(_entities[0].properties[0]);

  /// see [Owner.name]
  static final name = QueryStringProperty<Owner>(_entities[0].properties[1]);
}

/// [Task] entity fields to define ObjectBox queries.
class Task_ {
  /// see [Task.id]
  static final id = QueryIntegerProperty<Task>(_entities[1].properties[0]);

  /// see [Task.text]
  static final text = QueryStringProperty<Task>(_entities[1].properties[1]);

  /// see [Task.status]
  static final status = QueryBooleanProperty<Task>(_entities[1].properties[2]);

  /// see [Task.event]
  static final event =
      QueryRelationToOne<Task, Event>(_entities[1].properties[3]);

  /// see [Task.owner]
  static final owner =
      QueryRelationToMany<Task, Owner>(_entities[1].relations[0]);
}

/// [Event] entity fields to define ObjectBox queries.
class Event_ {
  /// see [Event.id]
  static final id = QueryIntegerProperty<Event>(_entities[2].properties[0]);

  /// see [Event.name]
  static final name = QueryStringProperty<Event>(_entities[2].properties[1]);

  /// see [Event.date]
  static final date = QueryIntegerProperty<Event>(_entities[2].properties[2]);

  /// see [Event.location]
  static final location =
      QueryStringProperty<Event>(_entities[2].properties[3]);
}
